module ALU_CPU(
	
	input clk_i,
   input rst_i
	
);

	parameter debug = 1'b0;

	localparam [2:0] alu_fn_add  = 3'b000;
	localparam [2:0] alu_fn_addc = 3'b001;
	localparam [2:0] alu_fn_sub  = 3'b010;
	localparam [2:0] alu_fn_subc = 3'b011;
	localparam [2:0] alu_fn_and  = 3'b100;
	localparam [2:0] alu_fn_or   = 3'b101;
	localparam [2:0] alu_fn_xor  = 3'b110;
	localparam [2:0] alu_fn_mask = 3'b111;

	localparam [1:0] shift_fn_shl = 2'b00;
	localparam [1:0] shift_fn_shr = 2'b01;
	localparam [1:0] shift_fn_rol = 2'b10;
	localparam [1:0] shift_fn_ror = 2'b11;

	always @*  // ALU
		if (IR_decode_alu_reg || IR_decode_alu_immed || IR_decode_mem) begin
			if (IR_decode_alu_reg) begin 
				ALU_fn = IR_alu_reg_fn;
				ALU_right_operand = GPR_r2;
			end
			else if (IR_decode_alu_immed) begin
				ALU_fn = IR_alu_immed_fn;
				ALU_right_operand = IR_immed;
			end
			else begin
				ALU_fn = alu_fn_add;
				ALU_right_operand = IR_offset;
			end
			case (ALU_fn)
				alu_fn_add:
					ALU_tmp_result = GPR_rs + ALU_right_operand;
				alu_fn_addc:
					ALU_tmp_result = GPR_rs + ALU_right_operand + cc_C;
				alu_fn_sub:
					ALU_tmp_result = GPR_rs - ALU_right_operand;
				alu_fn_subc:
					ALU_tmp_result = GPR_rs - ALU_right_operand - cc_C;
				alu_fn_and:
					ALU_tmp_result = GPR_rs & ALU_right_operand;
				alu_fn_or:
					ALU_tmp_result = GPR_rs | ALU_right_operand;
				alu_fn_xor:
					ALU_tmp_result = GPR_rs ^ ALU_right_operand;
				alu_fn_mask:
					ALU_tmp_result = GPR_rs & ~ALU_right_operand;
			endcase
			ALU_result = ALU_tmp_result[7:0];
			ALU_C = ALU_tmp_result[8];
		end
		else begin
			case (IR_shift_fn)
				shift_fn_shl:
				begin
					ALU_tmp_result = GPR_rs << IR_count;
					ALU_shift_result = ALU_tmp_result[7:0];
					ALU_C = ALU_tmp_result[8];
				end
				shift_fn_shr:
				begin
					ALU_tmp_result = {GPR_rs, 1'b0} >> IR_count;
					ALU_shift_result = ALU_tmp_result[8:1];
					ALU_C = ALU_tmp_result[0];
				end
				shift_fn_rol:
				begin
					ALU_shift_result = (GPR_rs << IR_count) | (GPR_rs >> (8 - IR_count));
					ALU_C = ALU_shift_result[0];
				end
				shift_fn_ror:
				begin
					ALU_shift_result = (GPR_rs >> IR_count) | (GPR_rs << (8 - IR_count));
					ALU_C = ALU_shift_result[7];
				end
			endcase
			ALU_result = ALU_shift_result;      
		end

	assign ALU_Z = ALU_result == 0;

	always @(posedge clk_i)  // ALU reg
		if (state == execute_state)
			ALU_out <= ALU_result;
	  

endmodule
