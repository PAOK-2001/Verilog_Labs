		text
		org	0		; reset
		jmp	begin

		org	1		; interrupt service
		reti

; ----------------------------------------------------------------
;
; Subroutine mult: (result buffer) := r4 * r5
;   r4 = operand1, r5 = operand2, r6 = ptr to result buffer
;   preserves r4; overwrites r5, r6, r7

mult:		stm	r6, result_ptr	; save ptr to result buffer
		add	r6, r0, r0	; clear product in r6/r7
		add	r7, r0, r0

		add	r0, r5, r0	; skip if operand2 = 0
		bz	skip

loop:		add	r7, r7, r4	; add operand1 to product
		addc	r6, r6, 0
		sub	r5, r5, 1	; decrement operand2
		bnz	loop		; and loop if not yet 0

skip:		ldm	r5, result_ptr	; restore ptr to result buffer
		stm	r6, (r5)+0	; save product in result buffer
		stm	r7, (r5)+1
		ret

; ----------------------------------------------------------------
;
; Main program:
;   multiplies 20 pairs of numbers
;   

		org	16
begin:		disi
		add	r1, r0, 20		; count of products
		add	r2, r0, result_buf	; ptr to result buffer
		add	r3, r0, 4		; init operand2 := 4
		add	r4, r0, 5		; init operand1 := 5

loop1:		add	r5, r3, r0		; set up params for mult
		add	r6, r2, r0		; (r4 already set up)
		jsb	mult
		add	r3, r4, r0		; operand2 := operand1
		add	r4, r4, 1		; incr operand1
		add	r2, r2, 2		; advance ptr
		sub	r1, r1, 1		; decr count
		bnz	loop1

stop:		stby

		data
result_buf:	bss	30		; 15 x 2-byte results. Expect:
					; 4 * 5 = 20	 0014
					; 5 * 6 = 30	 001E
					; 6 * 7 = 42	 002A
					; 7 * 8 = 56	 0038
					; 8 * 9 = 72	 0048
					; 9 * 10 = 90	 005A
					; 10 * 11 = 110	 006E
					; 11 * 12 = 132	 0084
					; 12 * 13 = 156	 009C
					; 13 * 14 = 182  00B6
					; 14 * 15 = 210  00D2
					; 15 * 16 = 240  00F0
					; 16 * 17 = 272  0110
					; 17 * 18 = 306  0132
					; 18 * 19 = 342  0156
					; 19 * 20 = 380  017C
					; 20 * 21 = 420	 01A4
					; 21 * 22 = 462  01CE
					; 22 * 23 = 506	 01FA
					; 23 * 24 = 552  0228
		org	255
result_ptr:	bss	1
